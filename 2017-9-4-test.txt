#include <iostream>
using namespace std;
#include <vector>

//void funtest()
//{
//	vector<int> v(5,1);
//	vector<int>::iterator it1=v.begin();
//	vector<int>::iterator it2=v.end();
//	vector<int> v2(it1,it2);
//}
//
//int main()
//{
//	funtest();
//	return 0;
//}

//struct TreeNode {
//	int val;
//	TreeNode *left;
//	TreeNode *right;
//	TreeNode(int x) : val(x), left(NULL), right(NULL) {}
//};
//
//class Solution {
//public:
//	TreeNode* reConstructBinaryTree(vector<int> pre,vector<int> vin) {
//		if(pre.size()!=vin.size())
//			return (TreeNode*)NULL;
//
//		_reConstructBinaryTree(_pRoot,pre,vin);
//		return _pRoot;
//	}
//
//	void _reConstructBinaryTree(TreeNode*& pRoot,vector<int> pre,vector<int> vin)
//	{
//
//		if(pre.size()>0)
//		{
//			pRoot=new TreeNode(pre[0]);
//			vector<int>::iterator it1=pre.begin();
//			vector<int>::iterator it2=vin.begin();
//
//			int count=0;
//			while(*it2++!=*it1)
//			{
//				count++;
//			}
//
//			_reConstructBinaryTree(pRoot->left,vector<int>(it1+1,it1+count+1),vector<int>(vin.begin(),it2));
//			_reConstructBinaryTree(pRoot->right,vector<int>(it1+count+1,pre.end()),vector<int>(it2,vin.end()));
//
//		}
//	}
//
//private:
//	TreeNode* _pRoot;   
//};
//
//
//void funtest()
//{
//	Solution t;
//	int arr[]={1,2,4,7,3,5,6,8};
//	int brr[]={4,7,2,1,5,3,8,6};
//	vector<int> v1(8,0);
//	vector<int> v2(8,0);
//	for(int i=0;i<sizeof(arr)/sizeof(arr[0]);i++)
//	{
//		v1[i]=arr[i];
//		v2[i]=brr[i];
//	}
//
//	t.reConstructBinaryTree(v1,v2);
//}
//
//int main()
//{
//	funtest();
//	return 0;
//}



//斐波那契数列
//int Fibonacci(int n) {
//	if(n<3)
//		return 1;
//
//	return Fibonacci(n-2)+Fibonacci(n-1);
//}
//
//int Fibonacci_r(int n)
//{
//	if(n==0)
//		return 0;
//	if(n<3)
//		return 1;
//
//	int first=1;
//	int second=1;
//	int ret=0;
//	while(n>=3)
//	{
//		ret=first+second;
//		first=second;
//		second=ret;
//		n--;
//	}
//
//	return ret;
//}
//
////跳台阶
//int jumpfloor(int n)
//{
//	if(n==1)
//		return 1;
//
//	int ret=1;
//	while(n>1)
//	{
//		ret*=2;
//		n--;
//	}
//
//	return ret;
//}
//
//int jumpfloor_r(int n)
//{
//	if(n==1)
//		return 1;
//
//	return 2*jumpfloor_r(n-1);
//}
//
//void funtest()
//{
//	cout<<jumpfloor_r(10)<<endl;
//	cout<<jumpfloor(10)<<endl;
//}
//
//int main()
//{
//	funtest();
//	return 0;
//}



//#include <iostream>
//using namespace std;
//#include <string>
//
//int GetMaxlenOfStr(string str1,string str2)
//{
//	if(str1.size()==0||str2.size()==0)
//		return 0;
//
//	int i=0;
//	int j=0;
//	int len=0;
//	int max=0;
//	for(i=0;i<str1.size();i++)
//	{
//		for(j=0;j<str2.size();j++)
//		{
//			if(str1[i]==str2[j])
//			{
//				int x=i;
//				int y=j;
//				while(x<str1.size()&&y<str2.size()&&str1[x++]==str2[y++])
//				{
//					len++;
//				}
//				if(len>max)
//					max=len;
//				len=0;
//			}
//		}
//	}
//
//	return max;
//
//}
//
//
//void funtest()
//{
//	string s1,s2;
//	cin>>s1;
//	fflush(stdin);
//	cin>>s2;
//	cout<<GetMaxlenOfStr(s1,s2)<<endl;
//}
//
//int main()
//{
//	funtest();
//	return 0;
//}


//int rectCover(int number) {
//	if(number==0)
//		return 0;
//
//	if(number==1)
//		return 1;
//
//	int* arr=new int[number+1];
//	int i=0;
//	for(i=0;i<number+1;i++)
//	{
//		arr[i]=1;
//	}
//
//	for(i=2;i<number+1;i++)
//	{
//		arr[i]=arr[i]+arr[i-2]+arr[i-1];
//	}
//
//	int ret=arr[number];
//	delete[] arr;
//
//	return ret;
//}
//
//
//void funtest()
//{
//	cout<<rectCover(2)<<endl;
//}
//
//int main()
//{
//	funtest();
//	return 0;
//}



//double Power(double base, int exponent) {
//	double ret=1;
//
//	while(exponent)
//	{
//		ret*=base;
//		exponent--;
//	}
//
//	return ret;
//}
//
//void funtest()
//{
//	cout<<Power(1.2,5)<<endl;
//}
//
//int main()
//{
//	funtest();
//	return 0;
//}




//void reOrderArray(vector<int> &array) {
//	int left=0;
//	int right=left+1;
//
//	while(left<array.size()&&right<array.size())
//	{
//		while(left<array.size()&&array[left]%2!=0)
//			left++;
//		right=left+1;
//		while(right<array.size()&&array[right]%2==0)
//			right++;
//		if(right<array.size())
//		{
//			int k=array[right];
//			int i=right;
//			for(i=right;i>left;i--)
//			{
//				array[i]=array[i-1];
//			}
//			array[i]=k;
//		}
//	}
//}
//
//
//void funtest()
//{
//	int arr[]={1,2,3,4,5,6,7};
//	vector<int> v;
//	for(int i=0;i<sizeof(arr)/sizeof(arr[0]);i++)
//	{
//		v.push_back(arr[i]);
//	}
//	reOrderArray(v);
//}
//
//int main()
//{
//	funtest();
//	return 0;
//}




//#include <iostream>
//using namespace std;
//#include <vector>
//
//int GetNum(vector<int>& v)
//{
//	int num[11];
//	int i=0;
//	for(i=0;i<11;i++)
//	{
//		num[i]=0;
//	}
//	for(i=0;i<v.size();i++)
//	{
//		num[v[i]]=1;
//	}
//	int ret[3];
//	int idx=0;
//	for(i=1;i<11;i++)
//	{
//		if(num[i]==0)
//			ret[idx++]=i;
//	}
//
//	int result=0;
//	for(i=0;i<3;i++)
//	{
//		result=ret[i]%7;
//		int count=0;
//		if(i+1<3)
//		{
//			int num=ret[i+1];
//			while(num)
//			{
//				num/=10;
//				count++;
//			}
//			while(count--)
//			{
//				result*=10;
//			}
//			ret[i+1]=result+ret[i+1];
//		}
//	}
//
//	return result;
//
//}
//
//
//void funtest()
//{
//	vector<int> v;
//	v.resize(7);
//	int i=0;
//	for(i=0;i<7;i++)
//	{
//		cin>>v[i];
//	}
//	cout<<GetNum(v)<<endl;
//}
//
//int main()
//{
//	funtest();
//	return 0;
//}



//struct ListNode {
//	int val;
//	struct ListNode *next;
//	ListNode(int x) :
//			val(x), next(NULL) {
//	}
//};
//
//    ListNode* Merge(ListNode* pHead1, ListNode* pHead2)
//    {
        //ListNode* pNewList=NULL;
        //ListNode* pcur=NULL;
        //while(pHead1&&pHead2)
        //    {
        //    if(pHead1->val<pHead2->val)
        //        {
        //        if(pNewList==NULL)
        //            pNewList=pHead1;
        //        else
        //            pcur->next=pHead1;
        //        pcur=pHead1;
        //        pHead1=pHead1->next;
        //    }
        //    else
        //        {
        //        if(pNewList==NULL)
        //            pNewList=pHead2;
        //        else
        //            pcur->next=pHead2;
        //        pcur=pHead2;
        //        pHead2=pHead2->next;
        //    }
        //}
        //
        //if(pHead1==NULL)
        //    pcur->next=pHead2;
        //if(pHead2==NULL)
        //    pcur->next=pHead1;
        //
        //return pNewList;
//
//
//    }
//
//void funtest()
//{
//	ListNode n1(1);
//	ListNode n2(2);
//	ListNode n3(3);
//	ListNode n4(4);
//	ListNode n5(5);
//	ListNode n6(6);
//	ListNode n7(7);
//	ListNode n8(8);
//
//	n1.next=&n3;
//	n3.next=&n5;
//	n5.next=&n7;
//
//	n2.next=&n4;
//	n4.next=&n6;
//	n6.next=&n8;
//
//	ListNode* l=Merge(&n1,&n2);
//}
//
//int main()
//{
//	funtest();
//	return 0;
//}


//vector<int> printMatrix(vector<vector<int> > matrix) {
//	vector<int> v;
//	int row=matrix.size();
//	int col=matrix[0].size();
//	v.resize(row*col);
//
//	int i=0;
//	int j=row-1;
//	int index=0;
//	while(i<=j)
//	{
//		int idx=i;
//		for(idx=i;idx<col-i;idx++)
//		{
//			v[index++]=matrix[i][idx];
//		}
//		for(idx=i+1;idx<j;idx++)
//		{
//			v[index++]=matrix[idx][col-i-1];
//		}
//		for(idx=col-i-1;idx>=i&&row-i-1!=i;idx--)
//		{
//			v[index++]=matrix[row-i-1][idx];
//		}
//		for(idx=j-1;idx>i&&i!=col-i-1;idx--)
//		{
//			v[index++]=matrix[idx][i];
//		}
//		i++;
//		j--;
//	}
//
//	return v;
//}
//
//
//void funtest()
//{
//	vector<vector<int>> v;
//	v.resize(4);
//	int arr[][4]={{1,2,3,4},{5,6,7,8},{9,10,11,12},{13,14,15,16}};
//	for(int i=0;i<4;i++)
//	{
//		for(int j=0;j<4;j++)
//		{
//			v[i].push_back(arr[i][j]);
//		}
//	}
//
//	vector<int> tmp=printMatrix(v);
//}
//
//int main()
//{
//	funtest();
//	return 0;
//}


//#include <vector>
//
//bool HelpFun(vector<int>& v,int left,int right)
//{
//	if(left>=right)
//		return true;
//
//	int i=0;
//	for(i=0;i<right-left;i++)
//	{
//		if(v[i]>v[right-left])
//			break;
//	}
//	int j=0;
//	int idx=i;
//	for(j=i;j<right-left;j++)
//	{
//		if(v[j]<v[right-left])
//			return false;
//	}
//
//	return HelpFun(v,left,idx-1)&&HelpFun(v,idx,right-1);
//}
//
//
//bool VerifySquenceOfBST(vector<int> sequence) {
//
//	if(sequence.size()==0)
//		return false;
//
//	return HelpFun(sequence,0,sequence.size()-1);
//
//	//if(sequence.size()==0||sequence.size()==1)
//	//	return true;
//
//	////if(sequence.size()==1)
//	////	return true;
//
//	//int root=sequence.size()-1;
//	//vector<int>::iterator it=sequence.begin();
//	//while(it!=sequence.end())
//	//{
//	//	if(*it>sequence[root])
//	//		break;
//	//	it++;
//	//}
//	//vector<int>::iterator tmp=it;
//	//while(it!=sequence.end())
//	//{
//	//	if(*it<sequence[root])
//	//		return false;
//	//	it++;
//	//}
//
//	//return VerifySquenceOfBST(vector<int>(sequence.begin(),tmp))&&VerifySquenceOfBST(vector<int>(tmp,sequence.end()-1));
//}
//
//void funtest()
//{
//	int arr[]={5,7,6,9,11,10,8};
//	vector<int> v(7,0);
//	for(int i=0;i<7;i++)
//	{
//		v[i]=arr[i];
//	}
//	cout<<VerifySquenceOfBST(v)<<endl;
//	//vector<int> tmp(v.end(),v.end());
//}
//
//int main()
//{
//	funtest();
//	return 0;
//}


//#include <vector>
//#include <algorithm>
//struct TreeNode {
//	int val;
//	struct TreeNode *left;
//	struct TreeNode *right;
//	TreeNode(int x) :
//	val(x), left(NULL), right(NULL) {
//	}
//};
//
//
//void GetPath(TreeNode* root,vector<vector<int>>& ret,vector<int> v,int num)
//{
//	if(root==NULL)
//		return ;
//
//	if(root->left==NULL&&root->right==NULL)
//	{
//		v.push_back(root->val);
//		int i=0;
//		int sum=0;
//		for(i=0;i<v.size();i++)
//		{
//			sum+=v[i];
//		}
//		if(sum==num)
//			ret.push_back(v);
//		return ;
//	}
//
//	v.push_back(root->val);
//	GetPath(root->left,ret,v,num);
//	GetPath(root->right,ret,v,num);
//}
//
//
//vector<vector<int> > FindPath(TreeNode* root,int expectNumber) {
//	vector<vector<int>> ret;
//	if(root==NULL)
//		return ret;
//	vector<int> v;
//	GetPath(root,ret,v,expectNumber);
//	return ret;
//}
//
//void funtest()
//{
//	TreeNode n1(10);
//	TreeNode n2(5);
//	TreeNode n3(12);
//	TreeNode n4(4);
//	TreeNode n5(7);
//
//	n1.left=&n2;
//	n1.right=&n3;
//	n2.left=&n4;
//	n2.right=&n5;
//
//	FindPath(&n1,22);
//	
//}
//
//int main()
//{
//	funtest();
//	return 0;
//}


#include <vector>
#include <string>
#include <algorithm>

bool isneedswap(string str,int i,int idx)
{
	while(i<idx)
	{
		if(str[i]==str[idx])
			return false;
		i++;
	}
	return true;
}


void Perm(vector<string>& v,string str,int i)
{
	int size=str.size();
	int idx=i;
	if(i==size-1)
	{
		v.push_back(str);
	}
	else
	{
		for(idx=i;idx<size;idx++)
		{
			if(isneedswap(str,i,idx))
			{
				std::swap(str[i],str[idx]);
				Perm(v,str,i+1);
				std::swap(str[i],str[idx]);
			}
		}
	}
}

vector<string> Permutation(string str) {
	vector<string> v;
	if(str.size()==0)
		return v;

	Perm(v,str,0);
	sort(v.begin(),v.end());
	return v;
}

void funtest()
{
	string str("abb");
	vector<string> v=Permutation(str);
}

int main()
{
	funtest();
	return 0;
}
