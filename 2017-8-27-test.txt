#include <iostream>
using namespace std;
#include <vector>

//void funtest()
//{
//	vector<int> v(5,1);
//	vector<int>::iterator it1=v.begin();
//	vector<int>::iterator it2=v.end();
//	vector<int> v2(it1,it2);
//}
//
//int main()
//{
//	funtest();
//	return 0;
//}

//struct TreeNode {
//	int val;
//	TreeNode *left;
//	TreeNode *right;
//	TreeNode(int x) : val(x), left(NULL), right(NULL) {}
//};
//
//class Solution {
//public:
//	TreeNode* reConstructBinaryTree(vector<int> pre,vector<int> vin) {
//		if(pre.size()!=vin.size())
//			return (TreeNode*)NULL;
//
//		_reConstructBinaryTree(_pRoot,pre,vin);
//		return _pRoot;
//	}
//
//	void _reConstructBinaryTree(TreeNode*& pRoot,vector<int> pre,vector<int> vin)
//	{
//
//		if(pre.size()>0)
//		{
//			pRoot=new TreeNode(pre[0]);
//			vector<int>::iterator it1=pre.begin();
//			vector<int>::iterator it2=vin.begin();
//
//			int count=0;
//			while(*it2++!=*it1)
//			{
//				count++;
//			}
//
//			_reConstructBinaryTree(pRoot->left,vector<int>(it1+1,it1+count+1),vector<int>(vin.begin(),it2));
//			_reConstructBinaryTree(pRoot->right,vector<int>(it1+count+1,pre.end()),vector<int>(it2,vin.end()));
//
//		}
//	}
//
//private:
//	TreeNode* _pRoot;   
//};
//
//
//void funtest()
//{
//	Solution t;
//	int arr[]={1,2,4,7,3,5,6,8};
//	int brr[]={4,7,2,1,5,3,8,6};
//	vector<int> v1(8,0);
//	vector<int> v2(8,0);
//	for(int i=0;i<sizeof(arr)/sizeof(arr[0]);i++)
//	{
//		v1[i]=arr[i];
//		v2[i]=brr[i];
//	}
//
//	t.reConstructBinaryTree(v1,v2);
//}
//
//int main()
//{
//	funtest();
//	return 0;
//}



//斐波那契数列
int Fibonacci(int n) {
	if(n<3)
		return 1;

	return Fibonacci(n-2)+Fibonacci(n-1);
}

int Fibonacci_r(int n)
{
	if(n==0)
		return 0;
	if(n<3)
		return 1;

	int first=1;
	int second=1;
	int ret=0;
	while(n>=3)
	{
		ret=first+second;
		first=second;
		second=ret;
		n--;
	}

	return ret;
}

//跳台阶
int jumpfloor(int n)
{
	if(n==1)
		return 1;

	int ret=1;
	while(n>1)
	{
		ret*=2;
		n--;
	}

	return ret;
}

int jumpfloor_r(int n)
{
	if(n==1)
		return 1;

	return 2*jumpfloor_r(n-1);
}

void funtest()
{
	cout<<jumpfloor_r(10)<<endl;
	cout<<jumpfloor(10)<<endl;
}

int main()
{
	funtest();
	return 0;
}