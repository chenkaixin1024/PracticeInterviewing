#include <iostream>
using namespace std;

//合并两个有序链表，合并以后的链表依旧有序
//struct ListNode
//{
//	ListNode(int d)
//		:data(d)
//		,_next(NULL)
//	{}
//
//	int data;
//	ListNode* _next;
//};
//
//ListNode* MergeList(ListNode* pHead1,ListNode* pHead2)
//{
//	ListNode* pNewList=NULL;
//	ListNode* pcur=NULL;
//
//	while(pHead1&&pHead2)
//	{
//		if(pHead1->data>pHead2->data)
//		{
//			if(pNewList==NULL)
//			{
//				pNewList=pHead2;
//			}
//			else
//			{
//				pcur->_next=pHead2;
//			}
//			pcur=pHead2;
//			pHead2=pHead2->_next;
//		}
//		else
//		{
//			if(pNewList==NULL)
//			{
//				pNewList=pHead1;
//			}
//			else
//			{
//				pcur->_next=pHead1;
//			}
//			pcur=pHead1;
//			pHead1=pHead1->_next;
//		}
//	}
//
//	if(pHead1)
//	{
//		pcur->_next=pHead1;
//	}
//	else
//	{
//		pcur->_next=pHead2;
//	}
//
//	return pNewList;
//}
//
//
//
//void funtest()
//{
//	ListNode n1(1);
//	ListNode n2(2);
//	ListNode n3(3);
//	ListNode n4(4);
//	ListNode n5(5);
//	ListNode n6(6);
//	ListNode n7(7);
//	ListNode n8(8);
//
//	n1._next=&n2;
//	n2._next=&n5;
//	n5._next=&n7;
//
//	n3._next=&n4;
//	n4._next=&n6;
//	n6._next=&n8;
//	ListNode* l=MergeList(&n1,&n3);
//}
//
//
//int main()
//{
//	funtest();
//	return 0;
//}



//实现1+2+3...+n，要求不能使用乘除法、循环、条件判断、选择相关的关键字。
//（这个题有多种解法，大家可以尽量去思考，这个题最优的解法时间复杂度是O(1），大家可以去尝试实现）
//int Sum(int n,int& ret)
//{
//	ret+=n;
//	return (n-1)&&Sum(n-1,ret);
//}

//class A
//{
//public:
//	A()
//	{
//		n++;
//		ret+=n;
//	}
//
//	static int n;
//	static int ret;
//};
//
//int A::n=0;
//int A::ret=0;
//
//void Sum(int n)
//{
//	A* p=new A[n];
//	cout<<A::ret<<endl;
//}


int Sum(int n);

class A
{
public:
	virtual int fun(int n)
	{
		return 0;
	}

};

class B:public A
{
public:
	virtual int fun(int n)
	{
		return n+Sum(n-1);
	}

};
A* arr[2];

int Sum(int n)
{
	A a;
	B b;
	
	arr[0]=&a;
	arr[1]=&b;

	return arr[!!n]->fun(n);
}


int main()
{
	//int ret=0;
	//Sum(100,ret);
	//cout<<ret<<endl;

	cout<<Sum(10)<<endl;
	return 0;
}



//struct ListNode
//{
//	ListNode(int d)
//		:data(d)
//		,_next(NULL)
//	{}
//
//	int data;
//	ListNode* _next;
//};
//
//bool ListhasLoop(ListNode* pHead)
//{
//	ListNode* fast=pHead;
//	ListNode* slow=pHead;
//
//	if(fast->_next)
//	{
//		fast=fast->_next->_next;
//		slow=slow->_next;
//	}
//	else
//		return false;
//
//	while(fast&&fast->_next&&fast!=slow)
//	{
//		fast=fast->_next->_next;
//		slow=slow->_next;
//	}
//	if(fast==slow)
//		return true;
//
//	return false;
//}
//
//ListNode* EnterPoint(ListNode* pHead)
//{
//	if(!ListhasLoop(pHead))
//		return NULL;
//
//	ListNode* fast=pHead;
//	ListNode* slow=pHead;
//	fast=fast->_next->_next;
//	slow=slow->_next;
//
//	while(fast!=slow)
//	{
//		fast=fast->_next->_next;
//		slow=slow->_next;
//	}
//
//	ListNode* pcur1=pHead;
//	ListNode* pcur2=fast;
//
//	while(pcur1!=pcur2)
//	{
//		pcur1=pcur1->_next;
//		pcur2=pcur2->_next;
//	}
//
//	return pcur1;
//}
//
//
//int LengthofLoop(ListNode* pHead)
//{
//	if(!ListhasLoop(pHead))
//		return 0;
//
//	ListNode* pNode=EnterPoint(pHead);
//	ListNode* pcur=pNode->_next;
//	int count=1;
//	while(pcur!=pNode)
//	{
//		count++;
//		pcur=pcur->_next;
//	}
//
//	return count;
//}
//
//
////判断链表是否带环？若带环求环的长度？若带环求环的入口点？并计算以上每个问题的时间复杂度？
//void funtest()
//{
//	ListNode n1(1);
//	ListNode n2(2);
//	ListNode n3(3);
//	ListNode n4(4);
//	ListNode n5(5);
//	ListNode n6(6);
//	ListNode n7(7);
//	ListNode n8(8);
//	
//	n1._next=&n2;
//	n2._next=&n3;
//	n3._next=&n4;
//	
//	n4._next=&n5;
//	n5._next=&n6;
//	n6._next=&n7;
//	n7._next=&n8;
//	//n8._next=&n1;
//	cout<<EnterPoint(&n1)->data<<endl;
//	cout<<LengthofLoop(&n1)<<endl;
//}
//
//int main()
//{
//	funtest();
//	return 0;
//}

//1.设计一个类不能被继承 
//class B
//{
//public:
////private:
//	B()
//	{}
//
//	B(int b)
//		:_b(b)
//	{}
//
//	~B()
//	{}
//	//friend class A;
//	int _b;
//};
//
//class A: public B
//{
//public:
//	A(int a=0)
//		:_a(a)
//	{
//		B(2);
//	}
//	int _a;
//};
//
//class C:public A
//{
//public:
//	C(int c=0)
//		:_c(c)
//	{}
//
//	int _c;
//};
//
//void funtest()
//{
//	C c;
//	//c._a=1;
//	//c._b=2;
//	//c._c=3;
//	cout<<c._b<<endl;
//}
//
//int main()
//{
//	funtest();
//	return 0;
//}


// 2.设计一个类只能在堆上创建对象。 
//class A
//{
//public:
//	static A* CreateObj()
//	{
//		return new A;
//	}
//
//	void Delete()
//	{
//		delete this;
//	}
//
//	//A()
//	//{
//	//	cout<<"A()"<<endl;
//	//}
//
//	//~A()
//	//{
//	//	cout<<"~A()"<<endl;
//	//}
//
//protected:
//	A()
//	{}
//
//	//~A()
//	//{
//	//	cout<<"~A()"<<endl;
//	//}
//
//	int a;
//};
//
//int main()
//{
//	//A a;
//	if(1)
//	{
//		//A a;
//		A* pa=A::CreateObj();
//		pa->Delete();
//	}
//	return 0;
//}




//3.设计一个类只能在栈上创建对象。
//class B
//{
//public:
//	B()
//	{}
//
//	~B()
//	{}
//
//private:
//	void* operator new(size_t)
//	{}
//
//	void operator delete(void*)
//	{}
//};
//
//
//int main()
//{
//	 B b;
//	 B* pb=new B;
//
//
//	return 0;
//}




//class A
//{
//public:
//	A()
//	{
//		cout<<"A()"<<endl;
//	}
//
//	~A()
//	{
//		cout<<"~A()"<<endl;
//	}
//	//int _a;
//};
//
//class B:virtual public A
//{
//public:
//	B()
//	{
//		cout<<"B()"<<endl;
//	}
//
//	~B()
//	{
//		cout<<"~B()"<<endl;
//	}
//
//	int _b;
//};
//
//int main()
//{
//	B b;
//	//b._a=1;
//	b._b=2;
//	return 0;
//}


//1.判断两个链表是否相交，若相交，求交点。（假设链表不带环）2.判断两个链表是否相交，若相交，求交点。（假设链表可能带环）
struct ListNode
{
	ListNode(int d)
		:data(d)
		,_next(NULL)
	{}

	int data;
	ListNode* _next;
};

ListNode* HasIntersectionPiont_Noloop(ListNode* pHead1,ListNode* pHead2)
{
	if(pHead1==NULL||pHead2==NULL)
		return NULL;

	ListNode* pcur1=pHead1;
	ListNode* pcur2=pHead2;
	int len1=0;
	int len2=0;

	while(pcur1)
	{
		pcur1=pcur1->_next;
		len1++;
	}
	while(pcur2)
	{
		pcur2=pcur2->_next;
		len2++;
	}

	int k=0;
	pcur1=pHead1;
	pcur2=pHead2;
	if(len1>len2)
	{
		k=len1-len2;
		while(k--)
		{
			pcur1=pcur1->_next;
		}
	}
	else
	{
		k=len2-len1;
		while(k--)
		{
			pcur2=pcur2->_next;
		}
	}

	while(pcur1&&pcur1!=pcur2)
	{
		pcur1=pcur1->_next;
		pcur2=pcur2->_next;
	}
	if(pcur1==NULL)
		return NULL;

	return pcur1;
}


//2.判断两个链表是否相交，若相交，求交点。（假设链表可能带环）
bool ListhasLoop(ListNode* pHead)
{
	ListNode* fast=pHead;
	ListNode* slow=pHead;

	if(fast->_next)
	{
		fast=fast->_next->_next;
		slow=slow->_next;
	}
	else
		return false;

	while(fast&&fast->_next&&fast!=slow)
	{
		fast=fast->_next->_next;
		slow=slow->_next;
	}
	if(fast==slow)
		return true;

	return false;
}

ListNode* EnterPoint(ListNode* pHead)
{
	if(!ListhasLoop(pHead))
		return NULL;

	ListNode* fast=pHead;
	ListNode* slow=pHead;
	fast=fast->_next->_next;
	slow=slow->_next;

	while(fast!=slow)
	{
		fast=fast->_next->_next;
		slow=slow->_next;
	}

	ListNode* pcur1=pHead;
	ListNode* pcur2=fast;

	while(pcur1!=pcur2)
	{
		pcur1=pcur1->_next;
		pcur2=pcur2->_next;
	}

	return pcur1;
}

ListNode* HasIntersectionPiont(ListNode* pHead1,ListNode* pHead2)
{
	if(pHead1==NULL||pHead2==NULL)
		return NULL;

	if(!ListhasLoop(pHead1)&&!ListhasLoop(pHead2))
		return HasIntersectionPiont_Noloop(pHead1,pHead2);
	else if(!ListhasLoop(pHead1)||!ListhasLoop(pHead2))
		return NULL;
	else
	{
		ListNode* pNode1=EnterPoint(pHead1);
		ListNode* pNode2=EnterPoint(pHead2);
		ListNode* pcur=pNode2;
		pcur=pcur->_next;
		while(pcur!=pNode2&&pcur!=pNode1)
		{
			pcur=pcur->_next;
		}
		if(pcur==pNode2&&pcur!=pNode1)
			return NULL;

		pcur=pNode1;
		while(pcur->_next==pNode1)
		{
			pcur=pcur->_next;
		}
		pcur->_next=pHead1;
		return EnterPoint(pHead2);
	}
}

void funtest()
{
	ListNode n1(1);
	ListNode n2(2);
	ListNode n3(3);
	ListNode n4(4);
	ListNode n5(5);
	ListNode n6(6);
	ListNode n7(7);
	ListNode n8(8);
	
	n1._next=&n2;
	n2._next=&n3;
	n3._next=&n4;
	//n4._next=&n2;
	n4._next=&n5;
	n5._next=&n3;

	//n5._next=&n6;
	n6._next=&n7;
	n7._next=&n8;
	n8._next=&n4;
	cout<<HasIntersectionPiont(&n1,&n6)->data<<endl;
}

int main()
{
	funtest();
	return 0;
}