//1.删除一个无头单链表的非尾节点 2.从尾到头打印单链表

//struct ListNode
//{
//	ListNode(int d)
//		:data(d)
//		,_next(NULL)
//	{}
//
//	int data;
//	ListNode* _next;
//};
//
//1.删除一个无头单链表的非尾节点 
//void Delete_NotTail(ListNode* pHead,ListNode* pos)
//{
//	if(pHead==NULL)
//		return ;
//
//	swap(pos->data,pos->_next->data);
//	ListNode* pcur=pos->_next;
//	pos->_next=pcur->_next;
//	delete pcur;
//}
//
//2.从尾到头打印单链表
//void PrintTailtoHead(ListNode* pHead)
//{
//	if(pHead==NULL)
//		return ;
//	
//	PrintTailtoHead(pHead->_next);
//	cout<<pHead->data<<" ";
//}
//
//void funtest()
//{
//	ListNode n1(1);
//	ListNode n2(2);
//	ListNode n3(3);
//	ListNode n4(4);
//	ListNode n5(5);
//	ListNode n6(6);
//	ListNode n7(7);
//	ListNode n8(8);
//	
//	n1._next=&n2;
//	n2._next=&n3;
//	n3._next=&n4;
//	n4._next=&n5;
//	n5._next=&n6;
//
//	//Delete_NotTail(&n1,&n1);
//	PrintTailtoHead(&n1);
//}
//
//int main()
//{
//	funtest();
//	return 0;
//}



//复杂链表的复制。一个链表的每个节点，有一个指向next指针指向下一个节点，
//还有一个random指针指向这个链表中的一个随机节点或者NULL，现在要求实现复制这个链表，返回复制后的新链表。 

typedef struct ComplexNode
{
	ComplexNode()
	{}

	ComplexNode(int data)
		:_data(data)
		,_next(NULL)
		,_random(NULL)
	{}

	int _data ; // 数据 
	ComplexNode * _next; // 指向下一个节点的指针 
	ComplexNode * _random; // 指向随机节点（可以是链表中的任意节点 or 空） 
}ComplexNode;


ComplexNode* ComplexListCopy(ComplexNode* pHead)
{
	if(pHead==NULL)
		return NULL;

	ComplexNode* pcur=pHead;
	ComplexNode* pNewNode=NULL;
	while(pcur)
	{
		pNewNode=new ComplexNode;
		pNewNode->_data=pcur->_data;
		pNewNode->_next=pcur->_next;
		pNewNode->_random=pcur->_random;

		pcur->_next=pNewNode;
		pcur=pcur->_next->_next;
	}

	int count=1;
	pcur=pHead;
	
	while(pcur)
	{
		if(count%2==0)
		{
			if(pcur->_random)
				pcur->_random=pcur->_random->_next;
		}
		count++;
		pcur=pcur->_next;
	}

	pcur=pHead;
	pNewNode=pHead->_next;
	ComplexNode* pTmp;
	while(pcur->_next)
	{
		pTmp=pcur->_next;
		pcur->_next=pcur->_next->_next;
		pcur=pTmp;
	}

	return pNewNode;
}

void funtest()
{
	ComplexNode n1(1);
	ComplexNode n2(2);
	ComplexNode n3(3);
	ComplexNode n4(4);
	ComplexNode n5(5);
	ComplexNode n6(6);

	n1._next=&n2;
	n2._next=&n3;
	n3._next=&n4;
	n4._next=&n5;
	n5._next=&n6;

	n1._random=NULL;
	n2._random=&n5;
	n3._random=&n4;
	n4._random=&n1;
	n5._random=NULL;
	n6._random=&n6;

	ComplexNode* l=ComplexListCopy(&n1);
}

int main()
{
	funtest();
	return 0;
}