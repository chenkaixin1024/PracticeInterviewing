//一个数组中有一个数字的次数超过了数组的一半，求出这个字符。如：int a[]={2,3,2,2,2,2,2,5,4,1,2,3}，求出超过一半的数字是2

int NumMorethanHalfofarray(int arr[],int size)
{
	for(int i=0;i<size;i++)
	{
		for(int j=0;j<size-i-1;j++)
		{
			if(arr[j]>arr[j+1])
				swap(arr[j],arr[j+1]);
		}
	}

	return arr[size/2];
}

void funtest()
{
	int a[]={2,3,2,2,2,2,2,5,4,1,2,3};
	NumMorethanHalfofarray(a,sizeof(a)/sizeof(a[0]));

	for(int i=0;i<sizeof(a)/sizeof(a[0]);i++)
	{
		cout<<a[i]<<" ";
	}

	cout<<endl;
	cout<<NumMorethanHalfofarray(a,sizeof(a)/sizeof(a[0]))<<endl;
}

int main()
{
	funtest();
	return 0;
}

//求二叉树的高度/销毁一颗二叉树-->Destroy(Node* root) 

struct Node
{
	Node(int data)
		:_data(data)
		,_pLeft(NULL)
		,_pRight(NULL)
	{}

	char _data;
	Node* _pLeft;
	Node* _pRight;
};

class BinaryTree
{
public:
	BinaryTree(char arr[],int size)
	{
		int index=0;
		CreateTree(_pRoot,arr,size,index,'#');
	}

	void CreateTree(Node*& pRoot,char arr[],int size,int& index,char invaid)
	{
		if(index<size)
		{
			if(arr[index]!=invaid)
			{
				pRoot=new Node(arr[index]);
				CreateTree(pRoot->_pLeft,arr,size,++index,invaid);
				CreateTree(pRoot->_pRight,arr,size,++index,invaid);
			}
		}

	}

	Node* _pRoot;
};


int Heigth(Node* pRoot)
{
	if(pRoot==NULL)
		return 0;

	int left=Heigth(pRoot->_pLeft)+1;
	int right=Heigth(pRoot->_pRight)+1;

	return left>right?left:right;
}

void Destroy(Node* pRoot)
{
	if(pRoot)
	{
		Destroy(pRoot->_pLeft);
		Destroy(pRoot->_pRight);
		delete pRoot;
	}
}

void funtest()
{
	char arr[]="124##58###3#6#7";
	//char arr[]="124##58###3#6";
	//char arr[]="1";
	BinaryTree bt(arr,strlen(arr));
	cout<<Heigth(bt._pRoot)<<endl;
	Destroy(bt._pRoot);
}

int main()
{
	funtest();
	return 0;
}