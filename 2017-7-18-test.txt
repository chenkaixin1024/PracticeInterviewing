//1.使用两个栈实现一个队列+使用两个队列实现一个栈 
//#include <stack>
//#include <assert.h>
//
//template <class T>
//class StacktoQueue
//{
//public:
//	StacktoQueue()
//	{}
//
//	void Push(T data)
//	{
//		while(!s2.empty())
//		{
//			s1.push(s2.top());
//			s2.pop();
//		}
//
//		s1.push(data);
//	}
//
//	void Pop()
//	{
//		while(!s1.empty())
//		{
//			s2.push(s1.top());
//			s1.pop();
//		}
//
//		if(!s2.empty())
//			s2.pop();
//	}
//
//	T& Front()
//	{
//		assert(!Empty());
//		while(!s1.empty())
//		{
//			s2.push(s1.top());
//			s1.pop();
//		}
//
//		if(!s2.empty())
//			return s2.top();
//	}
//
//	T& Back()
//	{
//		assert(!Empty());
//		while(!s2.empty())
//		{
//			s1.push(s2.top());
//			s2.pop();
//		}
//
//		if(!s1.empty())
//			return s1.top();
//	}
//
//	bool Empty()
//	{
//		return s1.empty()&&s2.empty();
//	}
//
//	size_t Size()
//	{
//		return s1.size()+s2.size();
//	}
//
//private:
//	stack<T> s1;
//	stack<T> s2;
//};
//
//#include <queue>
//
//template <class T>
//class QueuetoStack
//{
//public:
//	QueuetoStack()
//	{}
//
//	void Push(const T& data)
//	{
//		q1.push(data);
//	}
//
//	void Pop()
//	{
//		if(q1.empty())
//			return ;
//
//		while(q1.size()>1)
//		{
//			q2.push(q1.front());
//			q1.pop();
//		}
//
//		q1.pop();
//
//		while(!q2.empty())
//		{
//			q1.push(q2.front());
//			q2.pop();
//		}
//	}
//
//	T Top()
//	{
//		assert(!q1.empty());
//		return q1.back();
//	}
//
//	bool Empty()
//	{
//		return q1.empty();
//	}
//
//	size_t Size()
//	{
//		return q1.size();
//	}
//
//
//private:
//	queue<T> q1;
//	queue<T> q2;
//};
//
//
//void funtest()
//{
//	//StacktoQueue<int> sq;
//	//sq.Push(1);
//	//sq.Push(2);
//	//sq.Push(3);
//	//sq.Pop();
//	//sq.Pop();
//	//cout<<sq.Front()<<endl;
//	//cout<<sq.Back()<<endl;
//	//cout<<sq.Size()<<endl;
//	//sq.Push(4);
//	//sq.Push(5);
//	//cout<<sq.Front()<<endl;
//	//cout<<sq.Back()<<endl;
//	//cout<<sq.Size()<<endl;
//
//	//
//	//sq.Pop();
//	//sq.Pop();
//	//sq.Push(6);
//	//cout<<sq.Front()<<endl;
//	//cout<<sq.Back()<<endl;
//	//cout<<sq.Size()<<endl;
//
//	//sq.Pop();
//	//sq.Pop();
//
//	//sq.Pop();
//
//
//	QueuetoStack<int> qs;
//	qs.Push(1);
//	qs.Push(2);
//	qs.Push(3);
//	qs.Push(4);
//	cout<<qs.Top()<<endl;
//	cout<<qs.Size()<<endl;
//	qs.Pop();
//	qs.Pop();
//	qs.Pop();
//	cout<<qs.Top()<<endl;
//	cout<<qs.Size()<<endl;
//	qs.Push(5);
//	qs.Push(6);
//	cout<<qs.Top()<<endl;
//	cout<<qs.Size()<<endl;
//
//	
//	qs.Pop();
//	qs.Pop();
//	qs.Pop();
//	qs.Push(1);
//	cout<<qs.Top()<<endl;
//	cout<<qs.Size()<<endl;
//	qs.Pop();
//	qs.Pop();
//	qs.Top();
//}
//
//int main()
//{
//	funtest();
//	return 0;
//}

//#include <string>
//#include <assert.h>
//
////替换字符串中的空格为$$$。要求时间复杂度为O(N) 
//void StringReplace(char* str)
//{
//	assert(str);
//	int count=0;
//	int len=strlen(str);
//	char* p=str;
//	while(*p)
//	{
//		if(isspace(*p))
//			count++;
//		p++;
//	}
//
//	int idx=len+count*2;
//	for(int i=len;i>=0;i--)
//	{
//		if(isspace(str[i]))
//		{
//			str[idx--]='$';
//			str[idx--]='$';
//			str[idx--]='$';
//		}
//		else
//		{
//			str[idx--]=str[i];
//		}
//		
//	}
//
//}
//
//void funtest()
//{
//	char str[50]="talk is cheap show me the code";
//	cout<<str<<endl;
//	StringReplace(str);
//	cout<<str<<endl;
//}
//
//int main()
//{
//	funtest();
//	return 0;
//}